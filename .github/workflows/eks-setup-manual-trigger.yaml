# Manually triggered workflow
name: 'EKS Cluster Setup with CloudFormation'

on:
  workflow_dispatch:
    inputs:
      environment_stage:
        description: 'Environment Stage for Manual EKS Setup'
        required: true
        default: 'dev'

permissions:
    id-token: write
    contents: read
          
env:
  AWS_REGION: "us-east-1"

jobs:
  setup-eks-cluster:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash
    environment: ${{ github.event.inputs.environment_stage }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.IAM_ROLE }}
          role-session-name: GitHubActionsRoleSession
          aws-region: ${{ env.AWS_REGION }}

      # Official installation instructions from https://eksctl.io/installation/
      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          sudo mv /tmp/eksctl /usr/local/bin
          eksctl version

      # Create EKS cluster with CloudFormation
      # both AWSReservedSSO_Administrator-* role and an IAM role running this job should get full access to this EKS cluster
      - name: Create EKS Cluster with CloudFormation
        run: |
          ADMIN_ROLE=$(aws iam list-roles --query "Roles[?contains(RoleName, 'project')].RoleName | [0]" --output text)
          if [ -z "$ADMIN_ROLE" ]; then
            echo "Error: No matching IAM role found."
            exit 1
          fi
          make cluster name=temporary-eks-cluster-${{ github.event.inputs.environment_stage }} version=1.27 role=$ADMIN_ROLE
        working-directory: ./eks-cloudformation


      # Login to EKS
      - name: Login to EKS - update kubeconfig
        run: aws eks update-kubeconfig --name temporary-eks-cluster-${{ github.event.inputs.environment_stage }} --region $AWS_REGION

      # Display aws-auth configmap
      - name: View the new IAM to Kubernetes RBAC mapping
        run: kubectl -n kube-system get configmap aws-auth -o yaml
      
       # Add SonarQube analysis step
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Store the SonarQube token in GitHub Secrets
        run: |
          # Download and install SonarQube scanner
          curl -sSLo sonarqube-scanner.zip https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonarqube-scanner.zip
          ./sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
            -Dsonar.projectKey=my_project_key \
            -Dsonar.organization=my_organization \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=$SONAR_TOKEN