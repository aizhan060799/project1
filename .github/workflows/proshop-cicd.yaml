name: Application CI/CD

on:
   # trigger/start job when push happens to main or staging or feature/** branch
  push:
    branches: [ "main", "staging", "feature/**" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

# workflow level variable, available only within this YAML file to this workflow
env:
  ENVIRONMENT_STAGE: "dev"

jobs:
  app-deploy:
    # if main branch => production environment
    # if staging branch => staging environment
    # if any other branch name => dev environment
    environment: "dev"
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
      with:
        role-to-assume: ${{ vars.IAM_ROLE }}
        aws-region: us-east-1

# CI
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Backend image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: proshop-app/backend
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./proshop-app/backend
      run: |
        docker build -t $REPOSITORY:$IMAGE_TAG .
        docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

    - name: Build and Push Frontend image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: proshop-app/frontend
        IMAGE_TAG: ${{ github.sha }}
      working-directory: ./proshop-app/frontend
      run: |
        docker build -t $REPOSITORY:$IMAGE_TAG .
        docker tag $REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

# CD 
    - name: Login to EKS
      run: aws eks update-kubeconfig --name temporary-eks-cluster-${{ env.ENVIRONMENT_STAGE }}
    


    - name: Deploy the Frontend App
      env:
        SEMANTIC_TAG: "v1.0.1" # Manually set
      run: |
        if [ "${{ env.ENVIRONMENT_STAGE }}" = "dev" ]; then
          IMAGE_TAG=${{ github.sha }}
        else
          IMAGE_TAG=${{ env.SEMANTIC_TAG }}
        fi

        helm upgrade --install frontend \
         ./proshop-app/frontend-chart --values ./proshop-app/frontend-chart/frontend/values.yaml \
         --set appConfig.env.NODE_ENV=dev \
         --set image.tag=$IMAGE_TAG \
         --namespace shop-app --create-namespace

    - name: Deploy the Backend App
      env:
        SEMANTIC_TAG: "v1.0.1"  # Manually set
      run: |
        if [ "${{ env.ENVIRONMENT_STAGE }}" = "dev" ]; then
          IMAGE_TAG=${{ github.sha }}
        else
          IMAGE_TAG=${{ env.SEMANTIC_TAG }}
        fi

        helm upgrade --install backend \
         ./proshop-app/backend-chart/ --values ./proshop-app/backend-chart/backend/values.yaml \
         --set image.tag=$IMAGE_TAG \
         --namespace shop-app --create-namespace 



    - name: SonarQube Analysis
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Store the SonarQube token in GitHub Secrets
      run: |
        # Download and install SonarQube scanner
        curl -sSLo sonarqube-scanner.zip https://github.com/SonarSource/sonar-scanner-cli/releases/download/4.6.2.2472/sonar-scanner-cli-4.6.2.2472-linux.zip
         unzip sonarqube-scanner.zip
        ./sonar-scanner-4.6.2.2472-linux/bin/sonar-scanner \
         -Dsonar.projectKey=my_project_key \
         -Dsonar.organization=my_organization \
         -Dsonar.host.url=https://sonarcloud.io \
         -Dsonar.login=$SONAR_TOKEN